package com.example.hrm.ai;

import com.example.hrm.domain.NhanVien;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Service;

import java.util.ArrayList;
import java.util.Arrays;

@Service
public class HRMAIQueryTranslator {

    private static final Logger log = LoggerFactory.getLogger(HRMAIQueryTranslator.class);

    // ‚úÖ CONSTRUCTOR INJECTION - Fixed field injection warnings
    private final GeminiAIService geminiAIService;
    private final HRMPermissionService permissionService;

    public HRMAIQueryTranslator(GeminiAIService geminiAIService, HRMPermissionService permissionService) {
        this.geminiAIService = geminiAIService;
        this.permissionService = permissionService;
    }

    public QueryResult translateToSQL(String naturalLanguageQuery) {
        try {
            NhanVien currentUser = permissionService.getCurrentUser();
            if (currentUser == null) {
                return QueryResult.builder()
                        .queryType(QueryType.PERMISSION_DENIED)
                        .originalQuestion(naturalLanguageQuery)
                        .build();
            }

            UserRole userRole = permissionService.getCurrentUserRole();
            String databaseSchema = getDatabaseSchemaForRole(userRole);
            String securityContext = permissionService.getSecurityContext();

            String prompt = buildTranslationPrompt(naturalLanguageQuery, databaseSchema, securityContext, userRole, currentUser);

            log.info("üîÑ Translating query: {} | User: {} ({}) | Role: {}",
                    naturalLanguageQuery, currentUser.getHoTen(), currentUser.getId(), userRole);

            String aiResponse = geminiAIService.generateContent(prompt);
            log.info("ü§ñ AI Response: {}", aiResponse);

            return parseAIResponse(aiResponse, naturalLanguageQuery, currentUser, userRole);

        } catch (Exception e) {
            log.error("‚ùå Translation error: {}", e.getMessage(), e);
            return QueryResult.builder()
                    .queryType(QueryType.UNKNOWN)
                    .originalQuestion(naturalLanguageQuery)
                    .build();
        }
    }

    private String buildTranslationPrompt(String query, String schema, String securityContext, UserRole role, NhanVien currentUser) {
        String userName = currentUser.getHoTen();
        Integer employeeId = currentUser.getId();
        // ‚úÖ REMOVED unused variable 'chucVu' - Fixed warning
        Integer deptId = currentUser.getChucVu() != null ? currentUser.getChucVu().getPhongBan().getId() : null;

        return String.format("""
        B·∫†N L√Ä CHUY√äN GIA CHUY·ªÇN ƒê·ªîI NATURAL LANGUAGE SANG SQL CHO H·ªÜ TH·ªêNG HRM.
        
        ‚ö†Ô∏è DATABASE: SQL SERVER - D√ôNG TOP THAY V√å LIMIT
        ‚ö†Ô∏è C·∫§M TUY·ªÜT ƒê·ªêI: Kh√¥ng ƒë∆∞·ª£c d√πng newline (\\n) trong SQL! Ch·ªâ d√πng d·∫•u c√°ch.
        
        TH√îNG TIN USER HI·ªÜN T·∫†I:
        - T√™n: %s
        - ID: %d  
        - Login: trung2710
        - Vai tr√≤: %s
        - Ph√≤ng ban ID: %s
        - Ng√†y hi·ªán t·∫°i: 2025-06-21
        
        SCHEMA: %s
        
        C√ÇU H·ªéI: "%s"
        
        C√ÅC V√ç D·ª§ CHUY·ªÇN ƒê·ªîI THEO VAI TR√í:
        
        === NH√ÇN VI√äN (EMPLOYEE) ===
        1. "L∆∞∆°ng th√°ng 4 c·ªßa t√¥i"
           ‚Üí SQL: SELECT TOP 10 * FROM Luong WHERE MaNhanVien = %d AND Thang = 4 AND Nam = 2025
           ‚Üí TYPE: MY_SALARY

        2. "Th∆∞·ªüng c·ªßa t√¥i" ho·∫∑c "th∆∞·ªüng th√°ng n√†y"
           ‚Üí SQL: SELECT TOP 10 nv.*, t.TenThuong, t.MucThuong FROM NhanVien_Thuong nv JOIN Thuong t ON nv.MaThuong = t.MaThuong WHERE nv.MaNhanVien = %d ORDER BY nv.NgayThuong DESC
           ‚Üí TYPE: MY_BONUS

        3. "Vi ph·∫°m c·ªßa t√¥i" ho·∫∑c "t√¥i c√≥ vi ph·∫°m g√¨"
           ‚Üí SQL: SELECT TOP 10 nv.*, vp.LoaiViPham, vp.HinhThucPhat, vp.SoTienPhat FROM NhanVien_ViPham nv JOIN ViPham vp ON nv.MaViPham = vp.MaViPham WHERE nv.MaNhanVien = %d ORDER BY nv.NgayViPham DESC
           ‚Üí TYPE: MY_VIOLATION

        4. "Th√¥ng tin c√° nh√¢n c·ªßa t√¥i"
           ‚Üí SQL: SELECT TOP 1 * FROM NhanVien WHERE MaNhanVien = %d  
           ‚Üí TYPE: MY_INFO

        5. "Ch·∫•m c√¥ng th√°ng n√†y"
           ‚Üí SQL: SELECT TOP 50 * FROM ChamCong WHERE MaNhanVien = %d AND MONTH(Ngay) = 6 AND YEAR(Ngay) = 2025
           ‚Üí TYPE: MY_ATTENDANCE

        6. "H·ª£p ƒë·ªìng c·ªßa t√¥i"
           ‚Üí SQL: SELECT TOP 10 * FROM HopDong WHERE MaNhanVien = %d ORDER BY NgayBatDau DESC
           ‚Üí TYPE: MY_CONTRACT

        === ADMIN (Full Access) ===
        7. "Th√¥ng tin c·ªßa nh√¢n vi√™n t√™n l√† Nguy·ªÖn VƒÉn An"
           ‚Üí SQL: SELECT TOP 5 nv.*, cv.TenChucVu, pb.TenPhongBan FROM NhanVien nv LEFT JOIN ChucVu cv ON nv.MaChucVu = cv.MaChucVu LEFT JOIN PhongBan pb ON cv.MaPhongBan = pb.MaPhongBan WHERE nv.HoTen LIKE N'%%Nguy·ªÖn VƒÉn An%%'
           ‚Üí TYPE: EMPLOYEE_SEARCH

        8. "Danh s√°ch t·∫•t c·∫£ nh√¢n vi√™n trong c√¥ng ty"
           ‚Üí SQL: SELECT TOP 100 nv.MaNhanVien, nv.HoTen, nv.Email, nv.TrangThaiLamViec, cv.TenChucVu, pb.TenPhongBan, nv.LuongHienTai FROM NhanVien nv LEFT JOIN ChucVu cv ON nv.MaChucVu = cv.MaChucVu LEFT JOIN PhongBan pb ON cv.MaPhongBan = pb.MaPhongBan ORDER BY nv.MaNhanVien
           ‚Üí TYPE: ADMIN_ALL_EMPLOYEES

        9. "Nh√¢n vi√™n n√†o ƒë∆∞·ª£c th∆∞·ªüng nhi·ªÅu nh·∫•t nƒÉm nay?"
           ‚Üí SQL: SELECT TOP 10 nv.MaNhanVien, nv.HoTen, pb.TenPhongBan, SUM(nt.MucTien) AS TongTienThuong FROM NhanVien nv JOIN NhanVien_Thuong nt ON nv.MaNhanVien = nt.MaNhanVien LEFT JOIN ChucVu cv ON nv.MaChucVu = cv.MaChucVu LEFT JOIN PhongBan pb ON cv.MaPhongBan = pb.MaPhongBan WHERE YEAR(nt.NgayThuong) = YEAR(GETDATE()) GROUP BY nv.MaNhanVien, nv.HoTen, pb.TenPhongBan ORDER BY TongTienThuong DESC
           ‚Üí TYPE: ADMIN_SALARY_ANALYSIS

        10. "L·ªãch s·ª≠ th∆∞·ªüng nƒÉm 2025"
            ‚Üí SQL: SELECT nv.*, t.TenThuong, t.MucThuong FROM NhanVien_Thuong nv JOIN Thuong t ON nv.MaThuong = t.MaThuong WHERE YEAR(nv.NgayThuong) = 2025 ORDER BY nv.NgayThuong DESC
            ‚Üí TYPE: ADMIN_SALARY_ANALYSIS

        11. "Ti·ªÅn ph·∫°t t·ªïng c·ªông"
            ‚Üí SQL: SELECT SUM(vp.SoTienPhat) AS TongTienPhat FROM NhanVien_ViPham nv JOIN ViPham vp ON nv.MaViPham = vp.MaViPham
            ‚Üí TYPE: ADMIN_FINANCIAL_ANALYSIS

        12. "Th·ªëng k√™ tƒÉng ca theo ph√≤ng ban"
            ‚Üí SQL: SELECT pb.TenPhongBan, SUM(cc.SoGioTangCa) AS TongSoGioTangCa FROM PhongBan pb JOIN ChucVu cv ON pb.MaPhongBan = cv.MaPhongBan JOIN NhanVien nv ON cv.MaChucVu = nv.MaChucVu JOIN ChamCong cc ON nv.MaNhanVien = cc.MaNhanVien WHERE MONTH(cc.Ngay) = 6 AND YEAR(cc.Ngay) = 2025 GROUP BY pb.MaPhongBan, pb.TenPhongBan ORDER BY TongSoGioTangCa DESC
            ‚Üí TYPE: ADMIN_DEPARTMENT_REPORT

        13. "Nh√¢n vi√™n vi ph·∫°m nhi·ªÅu nh·∫•t"
            ‚Üí SQL: SELECT TOP 10 nv.MaNhanVien, nv.HoTen, pb.TenPhongBan, COUNT(*) AS SoLanViPham FROM NhanVien nv JOIN NhanVien_ViPham nvp ON nv.MaNhanVien = nvp.MaNhanVien LEFT JOIN ChucVu cv ON nv.MaChucVu = cv.MaChucVu LEFT JOIN PhongBan pb ON cv.MaPhongBan = pb.MaPhongBan GROUP BY nv.MaNhanVien, nv.HoTen, pb.TenPhongBan ORDER BY SoLanViPham DESC
            ‚Üí TYPE: ADMIN_ATTENDANCE_REPORT

        14. "H·ª£p ƒë·ªìng c·ªßa nh√¢n vi√™n t√™n Nguy·ªÖn Minh S√°ng"
            ‚Üí SQL: SELECT TOP 10 hd.*, nv.HoTen FROM HopDong hd JOIN NhanVien nv ON hd.MaNhanVien = nv.MaNhanVien WHERE nv.HoTen LIKE N'%%Nguy·ªÖn Minh S√°ng%%' ORDER BY hd.NgayBatDau DESC
            ‚Üí TYPE: ADMIN_CONTRACT_REPORT

        15. "B√°o c√°o l∆∞∆°ng theo ph√≤ng ban th√°ng 5/2025"
            ‚Üí SQL: SELECT pb.TenPhongBan, COUNT(DISTINCT nv.MaNhanVien) as SoNhanVien, AVG(l.TongThuNhap) as LuongTrungBinh, SUM(l.TongThuNhap) as TongLuong, MIN(l.TongThuNhap) as LuongThapNhat, MAX(l.TongThuNhap) as LuongCaoNhat FROM PhongBan pb JOIN ChucVu cv ON pb.MaPhongBan = cv.MaPhongBan JOIN NhanVien nv ON cv.MaChucVu = nv.MaChucVu JOIN Luong l ON nv.MaNhanVien = l.MaNhanVien WHERE l.Thang = 5 AND l.Nam = 2025 GROUP BY pb.MaPhongBan, pb.TenPhongBan ORDER BY TongLuong DESC
            ‚Üí TYPE: ADMIN_DEPARTMENT_REPORT

        16. "Nh√¢n vi√™n ƒëi mu·ªôn nhi·ªÅu nh·∫•t th√°ng 6"
            ‚Üí SQL: SELECT TOP 10 nv.MaNhanVien, nv.HoTen, pb.TenPhongBan, COUNT(*) as SoLanMuon FROM NhanVien nv JOIN ChamCong cc ON nv.MaNhanVien = cc.MaNhanVien LEFT JOIN ChucVu cv ON nv.MaChucVu = cv.MaChucVu LEFT JOIN PhongBan pb ON cv.MaPhongBan = pb.MaPhongBan WHERE cc.TrangThai LIKE N'%%Mu·ªôn%%' AND MONTH(cc.Ngay) = 6 AND YEAR(cc.Ngay) = 2025 GROUP BY nv.MaNhanVien, nv.HoTen, pb.TenPhongBan ORDER BY SoLanMuon DESC
            ‚Üí TYPE: ADMIN_ATTENDANCE_REPORT

        17. "Th·ªëng k√™ t·ªïng quan c√¥ng ty"
            ‚Üí SQL: SELECT 'TongNhanVien' as Metric, COUNT(*) as Value FROM NhanVien WHERE TrangThaiLamViec = N'ƒêang l√†m vi·ªác' UNION ALL SELECT 'TongPhongBan', COUNT(*) FROM PhongBan UNION ALL SELECT 'LuongTrungBinh', CAST(AVG(TongThuNhap) as INT) FROM Luong WHERE Thang = 6 AND Nam = 2025 UNION ALL SELECT 'TongChiPhiLuong', CAST(SUM(TongThuNhap) as BIGINT) FROM Luong WHERE Thang = 6 AND Nam = 2025
            ‚Üí TYPE: ADMIN_COMPANY_STATS

        18. "Ph√¢n t√≠ch chi ph√≠ nh√¢n s·ª± th√°ng 5/2025" ho·∫∑c "T·ªïng chi ph√≠ l∆∞∆°ng c√¥ng ty"
            ‚Üí SQL: SELECT SUM(l.TongThuNhap) as TongChiPhiLuong, AVG(l.TongThuNhap) as LuongTrungBinh, COUNT(DISTINCT l.MaNhanVien) as SoNhanVien, SUM(l.TienTangCa) as TongTienTangCa, SUM(l.ThueThuNhap) as TongThue FROM Luong l WHERE l.Thang = 5 AND l.Nam = 2025
            ‚Üí TYPE: ADMIN_FINANCIAL_ANALYSIS
                        
        19. "T·ªïng l∆∞∆°ng to√†n c√¥ng ty th√°ng 4/2025"
            ‚Üí SQL: SELECT SUM(l.TongThuNhap) as TongChiPhiLuong, AVG(l.TongThuNhap) as LuongTrungBinh, COUNT(DISTINCT l.MaNhanVien) as SoNhanVien, SUM(l.TienTangCa) as TongTienTangCa, SUM(l.ThueThuNhap) as TongThue FROM Luong l WHERE l.Thang = 4 AND l.Nam = 2025
            ‚Üí TYPE: ADMIN_FINANCIAL_ANALYSIS

        20. "C√°c h·ª£p ƒë·ªìng s·∫Øp h·∫øt h·∫°n" ho·∫∑c "H·ª£p ƒë·ªìng s·∫Øp h·∫øt h·∫°n"
            ‚Üí SQL: SELECT hd.MaHopDong, hd.MaNhanVien, nv.HoTen, hd.LoaiHopDong, hd.NgayBatDau, hd.NgayKetThuc, hd.LuongCoBan, DATEDIFF(day, GETDATE(), hd.NgayKetThuc) as SoNgayConLai FROM HopDong hd JOIN NhanVien nv ON hd.MaNhanVien = nv.MaNhanVien WHERE hd.NgayKetThuc >= GETDATE() AND hd.NgayKetThuc <= DATEADD(month, 3, GETDATE()) ORDER BY hd.NgayKetThuc ASC
            ‚Üí TYPE: ADMIN_CONTRACT_REPORT
                        
        21. "H·ª£p ƒë·ªìng c·ªßa nh√¢n vi√™n t√™n Nguy·ªÖn Minh S√°ng"
            ‚Üí SQL: SELECT hd.MaHopDong, hd.MaNhanVien, nv.HoTen, hd.LoaiHopDong, hd.NgayBatDau, hd.NgayKetThuc, hd.LuongCoBan FROM HopDong hd JOIN NhanVien nv ON hd.MaNhanVien = nv.MaNhanVien WHERE nv.HoTen LIKE N'%%Nguy·ªÖn Minh S√°ng%%'
            ‚Üí TYPE: ADMIN_CONTRACT_REPORT
                        
        22. "Danh s√°ch t·∫•t c·∫£ h·ª£p ƒë·ªìng"
            ‚Üí SQL: SELECT hd.MaHopDong, hd.MaNhanVien, nv.HoTen, hd.LoaiHopDong, hd.NgayBatDau, hd.NgayKetThuc, hd.LuongCoBan FROM HopDong hd JOIN NhanVien nv ON hd.MaNhanVien = nv.MaNhanVien ORDER BY hd.NgayKetThuc DESC
            ‚Üí TYPE: ADMIN_CONTRACT_REPORT
        
        ‚ö†Ô∏è QUAN TR·ªåNG - PH√ÇN LO·∫†I QueryType:
        - "c·ªßa t√¥i" ‚Üí MY_xxx (Personal queries)
        - "th√¥ng tin c·ªßa nh√¢n vi√™n t√™n" ‚Üí EMPLOYEE_SEARCH  
        - "nh√¢n vi√™n c√≥ m√£/ID" ‚Üí EMPLOYEE_SEARCH
        - "danh s√°ch t·∫•t c·∫£ nh√¢n vi√™n" ‚Üí ADMIN_ALL_EMPLOYEES
        - "nh√¢n vi√™n n√†o ƒë∆∞·ª£c th∆∞·ªüng nhi·ªÅu nh·∫•t" ‚Üí ADMIN_SALARY_ANALYSIS
        - "l·ªãch s·ª≠ th∆∞·ªüng nƒÉm" ‚Üí ADMIN_SALARY_ANALYSIS
        - "ti·ªÅn ph·∫°t t·ªïng c·ªông" ‚Üí ADMIN_FINANCIAL_ANALYSIS
        - "th·ªëng k√™ tƒÉng ca theo ph√≤ng ban" ‚Üí ADMIN_DEPARTMENT_REPORT
        - "nh√¢n vi√™n vi ph·∫°m nhi·ªÅu nh·∫•t" ‚Üí ADMIN_ATTENDANCE_REPORT
        - "h·ª£p ƒë·ªìng" ‚Üí ADMIN_CONTRACT_REPORT (contract queries)
        - "b√°o c√°o l∆∞∆°ng theo ph√≤ng ban" ‚Üí ADMIN_DEPARTMENT_REPORT
        - "ƒëi mu·ªôn nhi·ªÅu nh·∫•t" ‚Üí ADMIN_ATTENDANCE_REPORT
        - "th·ªëng k√™ t·ªïng quan" ‚Üí ADMIN_COMPANY_STATS
        - "ph√¢n t√≠ch chi ph√≠" ho·∫∑c "t·ªïng chi ph√≠" ‚Üí ADMIN_FINANCIAL_ANALYSIS
        
        B·∫¢O M·∫¨T: %s
        
        Y√äU C·∫¶U:
        1. LU√îN d√πng TOP thay v√¨ LIMIT
        2. V·ªõi personal queries (MY_xxx): Thay USER_ID b·∫±ng MaNhanVien = %d
        3. V·ªõi admin queries: KH√îNG c·∫ßn WHERE MaNhanVien (full access)
        4. S·ª≠ d·ª•ng LIKE N'%%text%%' cho t√¨m ki·∫øm Unicode
        5. JOIN ƒë·∫ßy ƒë·ªß ƒë·ªÉ l·∫•y th√¥ng tin ph√≤ng ban, ch·ª©c v·ª•
        6. ‚ö†Ô∏è SQL PH·∫¢I TR√äN 1 D√íNG DUY NH·∫§T - KH√îNG c√≥ \\n hay newline
        7. SQL ch·ªâ ƒë∆∞·ª£c c√≥ d·∫•u c√°ch ƒë·ªÉ ph√¢n c√°ch, kh√¥ng c√≥ k√Ω t·ª± xu·ªëng d√≤ng
        8. ∆Øu ti√™n d·ªØ li·ªáu th√°ng 5/2025 thay v√¨ th√°ng 6/2025 n·∫øu kh√¥ng c√≥ y√™u c·∫ßu c·ª• th·ªÉ
        
        PH·∫¢N H·ªíI JSON B·∫ÆT BU·ªòC:
        {
            "success": true,
            "sql": "SELECT...",
            "explanation": "M√¥ t·∫£ truy v·∫•n",
            "query_type": "MY_SALARY",
            "parameters": [],
            "estimated_rows": 10
        }
        
        ‚ùå N·∫æU KH√îNG HI·ªÇU: query_type = "UNKNOWN"
        ‚úÖ PERSONAL: MY_LEAVE|MY_SALARY|MY_INFO|MY_ATTENDANCE|MY_CONTRACT|MY_BONUS|MY_VIOLATION
        ‚úÖ ADMIN: EMPLOYEE_SEARCH|ADMIN_ALL_EMPLOYEES|ADMIN_SALARY_ANALYSIS|ADMIN_DEPARTMENT_REPORT|ADMIN_ATTENDANCE_REPORT|ADMIN_COMPANY_STATS|ADMIN_FINANCIAL_ANALYSIS|ADMIN_CONTRACT_REPORT
        ‚úÖ SPECIAL: AI_GENERATED (for complex queries)
        """,
                userName,                          // 1. %s - T√™n
                employeeId,                        // 2. %d - ID
                role,                             // 3. %s - Vai tr√≤
                deptId != null ? deptId.toString() : "NULL", // 4. %s - Ph√≤ng ban ID
                schema,                           // 5. %s - SCHEMA
                query,                            // 6. %s - C√ÇU H·ªéI
                employeeId,                       // 7. %d - Personal examples
                employeeId,                       // 8. %d
                employeeId,                       // 9. %d
                employeeId,                       // 10. %d
                employeeId,                       // 11. %d
                employeeId,                       // 12. %d - Contract example
                securityContext,                  // 13. %s - B·∫¢O M·∫¨T
                employeeId                        // 14. %d - Y√äU C·∫¶U
        );
    }

    private QueryResult parseAIResponse(String aiResponse, String originalQuery, NhanVien currentUser, UserRole role) {
        try {
            String jsonResponse = extractJSON(aiResponse);

            if (jsonResponse.contains("\"success\": true") || jsonResponse.contains("\"success\":true")) {
                String sql = extractValue(jsonResponse, "sql");
                String explanation = extractValue(jsonResponse, "explanation");
                String queryTypeStr = extractValue(jsonResponse, "query_type");

                log.info("ü§ñ AI QueryType: '{}' for question: '{}'", queryTypeStr, originalQuery);

                QueryType finalQueryType = determineQueryType(queryTypeStr, sql, originalQuery);

                log.info("üîß Final QueryType: '{}' (AI: '{}')", finalQueryType, queryTypeStr);

                // Validate security
                if (!isSecureQuery(sql, role, currentUser)) {
                    return QueryResult.builder()
                            .queryType(QueryType.PERMISSION_DENIED)
                            .originalQuestion(originalQuery)
                            .currentUser(currentUser.getHoTen())
                            .userRole(role)
                            .build();
                }

                return QueryResult.builder()
                        .queryType(finalQueryType)
                        .sqlQuery(sql)
                        .parameters(new ArrayList<>())
                        .originalQuestion(originalQuery)
                        .currentUser(currentUser.getHoTen())
                        .userRole(role)
                        .explanation(explanation)
                        .needsUserContext(false)
                        .build();
            } else {
                return QueryResult.builder()
                        .queryType(QueryType.UNKNOWN)
                        .originalQuestion(originalQuery)
                        .currentUser(currentUser.getHoTen())
                        .userRole(role)
                        .build();
            }

        } catch (Exception e) {
            log.error("‚ùå Parse error: {}", e.getMessage(), e);
            return QueryResult.builder()
                    .queryType(QueryType.UNKNOWN)
                    .originalQuestion(originalQuery)
                    .currentUser(currentUser.getHoTen())
                    .userRole(role)
                    .build();
        }
    }

    // ‚úÖ ENHANCED: Better QueryType determination with specific patterns
    private QueryType determineQueryType(String queryTypeStr, String sql, String originalQuestion) {
        // First, try to use AI's QueryType if valid
        if (queryTypeStr != null && !queryTypeStr.isEmpty() && !"UNKNOWN".equalsIgnoreCase(queryTypeStr)) {
            try {
                QueryType aiQueryType = QueryType.valueOf(queryTypeStr.toUpperCase());

                // ‚úÖ VALIDATION: Check if AI's choice makes sense
                String lowerQuestion = originalQuestion.toLowerCase();
                String lowerSQL = sql.toLowerCase();

                // Validate bonus vs violation confusion
                if (aiQueryType == QueryType.MY_VIOLATION &&
                        (lowerQuestion.contains("th∆∞·ªüng") || lowerQuestion.contains("bonus") ||
                                lowerSQL.contains("nhanvien_thuong") || lowerSQL.contains("join thuong"))) {
                    log.warn("‚ö†Ô∏è AI misclassified bonus query as violation, correcting to MY_BONUS");
                    return QueryType.MY_BONUS;
                }

                if (aiQueryType == QueryType.MY_BONUS &&
                        (lowerQuestion.contains("vi ph·∫°m") || lowerQuestion.contains("ph·∫°t") ||
                                lowerSQL.contains("nhanvien_vipham") || lowerSQL.contains("join vipham"))) {
                    log.warn("‚ö†Ô∏è AI misclassified violation query as bonus, correcting to MY_VIOLATION");
                    return QueryType.MY_VIOLATION;
                }

                return aiQueryType;
            } catch (IllegalArgumentException e) {
                log.warn("‚ö†Ô∏è Invalid QueryType from AI: '{}', falling back to detection", queryTypeStr);
            }
        }

        // ‚úÖ CONTRACT KEYWORDS DETECTION - HIGHEST PRIORITY
        if (containsAnyIgnoreCase(originalQuestion, Arrays.asList(
                "h·ª£p ƒë·ªìng", "h·ª£p ƒë·ªìng s·∫Øp h·∫øt h·∫°n", "contract", "h·∫øt h·∫°n", "gia h·∫°n"
        ))) {
            return QueryType.ADMIN_CONTRACT_REPORT;
        }

        // ‚úÖ SPECIFIC PATTERNS from error logs - HIGH PRIORITY
        String lowerQuestion = originalQuestion.toLowerCase();
        String lowerSQL = sql.toLowerCase();

        // Financial analysis patterns
        if (lowerQuestion.contains("ti·ªÅn ph·∫°t t·ªïng c·ªông") || lowerQuestion.contains("t·ªïng ti·ªÅn ph·∫°t") ||
                lowerSQL.contains("sum(vp.sotienphat)") || lowerSQL.contains("tongtienPhat")) {
            return QueryType.ADMIN_FINANCIAL_ANALYSIS;
        }

        // Salary analysis patterns
        if ((lowerQuestion.contains("l·ªãch s·ª≠ th∆∞·ªüng") && lowerQuestion.contains("nƒÉm")) ||
                (lowerQuestion.contains("nh√¢n vi√™n") && lowerQuestion.contains("th∆∞·ªüng") && lowerQuestion.contains("nhi·ªÅu nh·∫•t")) ||
                lowerSQL.contains("sum(nt.muctien)") || lowerSQL.contains("tongtienthuong")) {
            return QueryType.ADMIN_SALARY_ANALYSIS;
        }

        // Department report patterns
        if (lowerQuestion.contains("th·ªëng k√™ tƒÉng ca") || (lowerQuestion.contains("tƒÉng ca") && lowerQuestion.contains("ph√≤ng ban")) ||
                lowerSQL.contains("sum(cc.sogiotangca)") || lowerSQL.contains("tongsogioteangca")) {
            return QueryType.ADMIN_DEPARTMENT_REPORT;
        }

        // Attendance report patterns
        if ((lowerQuestion.contains("nh√¢n vi√™n") && lowerQuestion.contains("vi ph·∫°m") && lowerQuestion.contains("nhi·ªÅu nh·∫•t")) ||
                (lowerSQL.contains("count(*) as solanvipham") || (lowerSQL.contains("nhanvien_vipham") && lowerSQL.contains("group by")))) {
            return QueryType.ADMIN_ATTENDANCE_REPORT;
        }

        // Standard admin queries detection
        if (lowerQuestion.contains("th√¥ng tin") && lowerQuestion.contains("nh√¢n vi√™n") &&
                (lowerQuestion.contains("t√™n") || lowerQuestion.contains("m√£"))) {
            return QueryType.EMPLOYEE_SEARCH;
        }
        if (lowerQuestion.contains("danh s√°ch") && lowerQuestion.contains("t·∫•t c·∫£")) {
            return QueryType.ADMIN_ALL_EMPLOYEES;
        }
        if (lowerQuestion.contains("top") && lowerQuestion.contains("l∆∞∆°ng")) {
            return QueryType.ADMIN_SALARY_ANALYSIS;
        }
        if (lowerQuestion.contains("l∆∞∆°ng trung b√¨nh")) {
            return QueryType.ADMIN_SALARY_ANALYSIS;
        }
        if (lowerQuestion.contains("b√°o c√°o l∆∞∆°ng")) {
            return QueryType.ADMIN_DEPARTMENT_REPORT;
        }
        if (lowerQuestion.contains("ƒëi mu·ªôn") || (lowerQuestion.contains("mu·ªôn") && lowerQuestion.contains("nh·∫•t"))) {
            return QueryType.ADMIN_ATTENDANCE_REPORT;
        }
        if (lowerQuestion.contains("th·ªëng k√™ t·ªïng quan")) {
            return QueryType.ADMIN_COMPANY_STATS;
        }
        if (lowerQuestion.contains("ph√¢n t√≠ch chi ph√≠") || lowerQuestion.contains("t·ªïng chi ph√≠")) {
            return QueryType.ADMIN_FINANCIAL_ANALYSIS;
        }

        // Personal queries detection
        if (lowerQuestion.contains("c·ªßa t√¥i")) {
            if (lowerQuestion.contains("l∆∞∆°ng")) return QueryType.MY_SALARY;
            if (lowerQuestion.contains("th∆∞·ªüng")) return QueryType.MY_BONUS;
            if (lowerQuestion.contains("vi ph·∫°m")) return QueryType.MY_VIOLATION;
            if (lowerQuestion.contains("ch·∫•m c√¥ng")) return QueryType.MY_ATTENDANCE;
            if (lowerQuestion.contains("ngh·ªâ ph√©p")) return QueryType.MY_LEAVE;
            if (lowerQuestion.contains("h·ª£p ƒë·ªìng")) return QueryType.MY_CONTRACT;
            if (lowerQuestion.contains("th√¥ng tin")) return QueryType.MY_INFO;
        }

        // SQL-based detection as fallback
        if (lowerSQL.contains("where hoten like") || (lowerSQL.contains("where manhanvien =") && !lowerSQL.contains("1006"))) {
            return QueryType.EMPLOYEE_SEARCH;
        }
        if (lowerSQL.contains("group by") && lowerSQL.contains("phongban")) {
            return QueryType.ADMIN_DEPARTMENT_REPORT;
        }
        if (lowerSQL.contains("order by") && lowerSQL.contains("desc") && lowerSQL.contains("luong")) {
            return QueryType.ADMIN_SALARY_ANALYSIS;
        }

        // Employee personal queries
        if (lowerSQL.contains("from luong") || lowerSQL.contains("join luong")) {
            return QueryType.MY_SALARY;
        }
        if (lowerSQL.contains("from chamcong") || lowerSQL.contains("join chamcong")) {
            return QueryType.MY_ATTENDANCE;
        }
        if (lowerSQL.contains("from nghiphep") || lowerSQL.contains("join nghiphep")) {
            return QueryType.MY_LEAVE;
        }
        if (lowerSQL.contains("from hopdong") || lowerSQL.contains("join hopdong")) {
            return QueryType.MY_CONTRACT;
        }
        if (lowerSQL.contains("from nhanvien_thuong") || lowerSQL.contains("join thuong")) {
            return QueryType.MY_BONUS;
        }
        if (lowerSQL.contains("from nhanvien_vipham") || lowerSQL.contains("join vipham")) {
            return QueryType.MY_VIOLATION;
        }

        // Employee info detection
        if (lowerSQL.contains("from nhanvien") && !lowerSQL.contains("join")) {
            if (lowerSQL.contains("count") || lowerSQL.contains("group by")) {
                return QueryType.TEAM_INFO;
            }
            return lowerSQL.contains("where manhanvien =") ? QueryType.MY_INFO : QueryType.ADMIN_ALL_EMPLOYEES;
        }

        return QueryType.AI_GENERATED;
    }

    private boolean isSecureQuery(String sql, UserRole role, NhanVien currentUser) {
        String lowerSQL = sql.toLowerCase();

        // Block dangerous operations
        if (lowerSQL.contains("drop ") || lowerSQL.contains("delete ") ||
                lowerSQL.contains("update ") || lowerSQL.contains("insert ") ||
                lowerSQL.contains("truncate ") || lowerSQL.contains("alter ")) {
            log.warn("üö´ Blocked dangerous SQL operation: {}", sql);
            return false;
        }

        Integer employeeId = currentUser.getId();
        Integer deptId = permissionService.getCurrentDepartmentId();

        // Role-specific validations
        switch (role) {
            case EMPLOYEE:
                if (!needsEmployeeFilter(sql, employeeId, role.toString())) {
                    return true; // Already has filter
                }
                log.warn("üö´ Employee query missing user filter: {}", sql);
                return false;

            case MANAGER:
                boolean hasDeptFilter = deptId != null &&
                        (lowerSQL.contains("maphongban = " + deptId) || lowerSQL.contains("maphongban=" + deptId));
                boolean hasOwnFilter = lowerSQL.contains("manhanvien = " + employeeId) ||
                        lowerSQL.contains("manhanvien=" + employeeId);

                if (!hasDeptFilter && !hasOwnFilter) {
                    log.warn("üö´ Manager query missing department/user filter: {}", sql);
                    return false;
                }
                return true;

            case HR:
            case ADMIN:
                // ‚úÖ ADMIN has full access - no restrictions
                return true;

            default:
                return false;
        }
    }

    private String getDatabaseSchemaForRole(UserRole role) {
        return switch (role) {
            case EMPLOYEE -> getEmployeeSchema();
            case MANAGER -> getManagerSchema();
            case HR -> getHRSchema();
            case ADMIN -> getAdminSchema();
            default -> "KH√îNG C√ì QUY·ªÄN TRUY C·∫¨P";
        };
    }

    // ‚úÖ ENHANCED: Admin schema with updated examples
    private String getAdminSchema() {
        return """
            B·∫¢NG ƒê·∫¶Y ƒê·ª¶ CHO ADMIN (Full access - no restrictions):
            
            1. NhanVien - Th√¥ng tin nh√¢n vi√™n (T·∫§T C·∫¢)
               Columns: MaNhanVien, HoTen, GioiTinh, NgaySinh, SDT, Email, DiaChi, 
                       TrinhDoHocVan, SoNgayPhep, SoNgayPhepDaSuDung, ThamNien, 
                       LuongHienTai, TrangThaiLamViec, MaChucVu
            
            2. ChucVu - Ch·ª©c v·ª•
               Columns: MaChucVu, TenChucVu, MaQuyen, MaPhongBan
               
            3. PhongBan - Ph√≤ng ban  
               Columns: MaPhongBan, TenPhongBan
               
            4. Luong - B·∫£ng l∆∞∆°ng (T·∫§T C·∫¢ nh√¢n vi√™n)
               Columns: MaBangLuong, MaNhanVien, Thang, Nam, TienTangCa, SoNguoiPhuThuoc, 
                       ThueThuNhap, TongThuNhap, NgayNhan
            
            5. ChamCong - Ch·∫•m c√¥ng (T·∫§T C·∫¢ nh√¢n vi√™n)
               Columns: MaChamCong, MaNhanVien, Ngay, GioVao, GioRa, TrangThai, SoGioTangCa
            
            6. NghiPhep - Ngh·ªâ ph√©p (T·∫§T C·∫¢ nh√¢n vi√™n)
               Columns: MaNghiPhep, MaNhanVien, NgayBatDau, NgayKetThuc, LyDo, TrangThaiPheDuyet
            
            7. HopDong - H·ª£p ƒë·ªìng (T·∫§T C·∫¢ nh√¢n vi√™n)
               Columns: MaHopDong, MaNhanVien, LoaiHopDong, NgayBatDau, NgayKetThuc, 
                       LuongCoBan, TrangThai
            
            8. NhanVien_Thuong - Th∆∞·ªüng (T·∫§T C·∫¢ nh√¢n vi√™n)
               Columns: MaNhanVien, MaThuong, NgayThuong, MucTien
               JOIN: Thuong ON MaThuong (TenThuong, MucThuong, NguoiRaQuyetDinh)
            
            9. NhanVien_ViPham - Vi ph·∫°m (T·∫§T C·∫¢ nh√¢n vi√™n)  
               Columns: MaNhanVien, MaViPham, NgayViPham, MoTa, NguoiRaQuyetDinh
               JOIN: ViPham ON MaViPham (LoaiViPham, HinhThucPhat, SoTienPhat)
            
            10. Quyen - Quy·ªÅn h·∫°n
                Columns: MaQuyen, TenQuyen, MoTa
            
            ‚ö†Ô∏è SPECIFIC PATTERNS for common queries:
            - T·ªïng ti·ªÅn ph·∫°t: SELECT SUM(vp.SoTienPhat) AS TongTienPhat FROM NhanVien_ViPham nv JOIN ViPham vp ON nv.MaViPham = vp.MaViPham
            - L·ªãch s·ª≠ th∆∞·ªüng: SELECT nv.*, t.TenThuong, t.MucThuong FROM NhanVien_Thuong nv JOIN Thuong t ON nv.MaThuong = t.MaThuong WHERE YEAR(nv.NgayThuong) = 2025
            - Th·ªëng k√™ tƒÉng ca: SELECT pb.TenPhongBan, SUM(cc.SoGioTangCa) AS TongSoGioTangCa FROM PhongBan pb JOIN ChucVu cv ON pb.MaPhongBan = cv.MaPhongBan JOIN NhanVien nv ON cv.MaChucVu = nv.MaChucVu JOIN ChamCong cc ON nv.MaNhanVien = cc.MaNhanVien GROUP BY pb.MaPhongBan, pb.TenPhongBan
            - H·ª£p ƒë·ªìng s·∫Øp h·∫øt h·∫°n: SELECT hd.*, nv.HoTen, DATEDIFF(day, GETDATE(), hd.NgayKetThuc) as SoNgayConLai FROM HopDong hd JOIN NhanVien nv ON hd.MaNhanVien = nv.MaNhanVien WHERE hd.NgayKetThuc >= GETDATE() AND hd.NgayKetThuc <= DATEADD(month, 3, GETDATE())
            - Vi ph·∫°m nhi·ªÅu nh·∫•t: SELECT TOP 10 nv.MaNhanVien, nv.HoTen, pb.TenPhongBan, COUNT(*) AS SoLanViPham FROM NhanVien nv JOIN NhanVien_ViPham nvp ON nv.MaNhanVien = nvp.MaNhanVien LEFT JOIN ChucVu cv ON nv.MaChucVu = cv.MaChucVu LEFT JOIN PhongBan pb ON cv.MaPhongBan = pb.MaPhongBan GROUP BY nv.MaNhanVien, nv.HoTen, pb.TenPhongBan ORDER BY SoLanViPham DESC
            
            B·∫¢O M·∫¨T: ADMIN c√≥ FULL ACCESS - kh√¥ng c·∫ßn gi·ªõi h·∫°n WHERE cho personal data
            ‚ö†Ô∏è C·∫§M TUY·ªÜT ƒê·ªêI: SQL PH·∫¢I VI·∫æT TR√äN 1 D√íNG - KH√îNG c√≥ newline
            ‚ö†Ô∏è ∆ØU TI√äN: D·ªØ li·ªáu th√°ng 5/2025 thay v√¨ th√°ng 6/2025 n·∫øu kh√¥ng c√≥ y√™u c·∫ßu c·ª• th·ªÉ
            """;
    }

    private String getEmployeeSchema() {
        return """
            B·∫¢NG CHO NH√ÇN VI√äN (CH·ªà XEM TH√îNG TIN C·ª¶A M√åNH):
            
            1. NhanVien - Th√¥ng tin c√° nh√¢n
               Columns: MaNhanVien, HoTen, GioiTinh, NgaySinh, SDT, Email, DiaChi, 
                       TrinhDoHocVan, SoNgayPhep, SoNgayPhepDaSuDung, ThamNien, LuongHienTai, TrangThaiLamViec, MaChucVu
            
            2. Luong - B·∫£ng l∆∞∆°ng  
               Columns: MaBangLuong, MaNhanVien, Thang, Nam, TienTangCa, SoNguoiPhuThuoc, 
                       ThueThuNhap, TongThuNhap, NgayNhan
            
            3. ChamCong - Ch·∫•m c√¥ng
               Columns: MaChamCong, MaNhanVien, Ngay, GioVao, GioRa, TrangThai, SoGioTangCa
            
            4. NghiPhep - Ngh·ªâ ph√©p
               Columns: MaNghiPhep, MaNhanVien, NgayBatDau, NgayKetThuc, LyDo, TrangThaiPheDuyet
            
            5. HopDong - H·ª£p ƒë·ªìng
               Columns: MaHopDong, MaNhanVien, LoaiHopDong, NgayBatDau, NgayKetThuc, 
                       LuongCoBan, TrangThai
            
            6. NhanVien_Thuong - Th∆∞·ªüng nh√¢n vi√™n
               Columns: MaNhanVien, MaThuong, NgayThuong, MucTien  
               JOIN: Thuong ON MaThuong (TenThuong, MucThuong, NguoiRaQuyetDinh)
            
            7. NhanVien_ViPham - Vi ph·∫°m nh√¢n vi√™n
               Columns: MaNhanVien, MaViPham, NgayViPham, MoTa, NguoiRaQuyetDinh, NgayRaQuyetDinh
               JOIN: ViPham ON MaViPham (LoaiViPham, HinhThucPhat, SoTienPhat)
            
            B·∫¢O M·∫¨T: CH·ªà ƒë∆∞·ª£c WHERE MaNhanVien = USER_ID
            """;
    }

    private String getManagerSchema() {
        return getEmployeeSchema() + """
            
            B·∫¢NG TH√äM CHO MANAGER (Xem team + c√° nh√¢n):
            
            8. PhongBan - Ph√≤ng ban
               Columns: MaPhongBan, TenPhongBan
            
            9. ChucVu - Ch·ª©c v·ª•  
               Columns: MaChucVu, TenChucVu, MaQuyen, MaPhongBan
            
            B·∫¢O M·∫¨T: WHERE MaPhongBan = DEPT_ID OR MaNhanVien = USER_ID
            """;
    }

    private String getHRSchema() {
        return getManagerSchema() + """
            
            B·∫¢NG TH√äM CHO HR (To√†n quy·ªÅn nh√¢n s·ª±):
            
            12. Thuong - Danh m·ª•c th∆∞·ªüng
            13. PhuCap - Danh m·ª•c ph·ª• c·∫•p
            14. ViPham - Danh m·ª•c vi ph·∫°m
            15. BaoHiem - B·∫£o hi·ªÉm
            
            B·∫¢O M·∫¨T: C√≥ th·ªÉ xem T·∫§T C·∫¢ d·ªØ li·ªáu nh√¢n vi√™n
            """;
    }

    // ‚úÖ HELPER METHODS - Fixed and added missing methods
    private String extractJSON(String response) {
        int start = response.indexOf("{");
        int end = response.lastIndexOf("}") + 1;
        return (start >= 0 && end > start) ? response.substring(start, end) : response;
    }

    private String extractValue(String json, String key) {
        try {
            String pattern = "\"" + key + "\"\\s*:\\s*\"([^\"]+)\"";
            java.util.regex.Pattern p = java.util.regex.Pattern.compile(pattern);
            java.util.regex.Matcher m = p.matcher(json);
            return m.find() ? m.group(1) : "";
        } catch (Exception e) {
            return "";
        }
    }

    // ‚úÖ ADDED MISSING HELPER METHODS
    private boolean containsAnyIgnoreCase(String text, java.util.List<String> keywords) {
        if (text == null || keywords == null) return false;
        String lowerText = text.toLowerCase();
        return keywords.stream().anyMatch(keyword -> lowerText.contains(keyword.toLowerCase()));
    }

    private boolean needsEmployeeFilter(String sql, int employeeId, String userRole) {
        String lowerSQL = sql.toLowerCase();

        // Check if employee filter already exists
        if (lowerSQL.contains("manhanvien = " + employeeId)) {
            return false; // Already filtered
        }

        // Only non-admin roles need filtering
        return !"ADMIN".equalsIgnoreCase(userRole);
    }
}