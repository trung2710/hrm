package com.example.hrm.ai;

import com.example.hrm.domain.NhanVien;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.Arrays;

@Service
public class HRMChatService {

    private static final Logger log = LoggerFactory.getLogger(HRMChatService.class);

    @Autowired
    private ChatService generalChatService;

    @Autowired
    private HRMAIQueryTranslator hrmTranslator;

    @Autowired
    private HRMDatabaseExecutor databaseExecutor;

    @Autowired
    private HRMResponseFormatter responseFormatter;

    @Autowired
    private HRMPermissionService permissionService;

    public String processMessage(String userMessage, String username) {
        log.info("üöÄ === HRM CHAT SERVICE START ===");
        log.info("üöÄ Message: '{}'", userMessage);
        log.info("üöÄ Username: '{}'", username);

        try {
            // Get current user info
            NhanVien currentUser = permissionService.getCurrentUser();
            UserRole userRole = permissionService.getCurrentUserRole();

            log.info("üë§ === USER INFO ===");
            if (currentUser != null) {
                log.info("üë§ Name: {}", currentUser.getHoTen());
                log.info("üë§ ID: {}", currentUser.getId());
                log.info("üë§ Role: {}", userRole);
            } else {
                log.error("üë§ ‚ùå Current user is NULL!");
                return "‚ùå Kh√¥ng th·ªÉ x√°c ƒë·ªãnh danh t√≠nh c·ªßa b·∫°n. Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i.";
            }

            String cleanMessage = userMessage.trim();

            // Test HRM detection
            boolean isHRMDetected = isHRMQuestion(cleanMessage);
            log.info("üè¢ HRM Detection Result: {}", isHRMDetected);

            if (isHRMDetected) {
                log.info("üè¢ Routing to HRM system...");
                String result = processHRMQuestion(cleanMessage, currentUser, userRole);
                log.info("üè¢ HRM Result length: {}", result.length());

                if (result.length() > 0) {
                    String preview = result.substring(0, Math.min(result.length(), 100));
                    log.info("üè¢ HRM Result preview: {}", preview);
                }

                return result;
            } else {
                log.info("üí¨ Routing to General AI...");
                return processGeneralQuestion(cleanMessage, username);
            }

        } catch (Exception e) {
            log.error("‚ùå ProcessMessage error: {}", e.getMessage(), e);
            return "‚ùå L·ªói x·ª≠ l√Ω tin nh·∫Øn: " + e.getMessage();
        }
    }

    private boolean isHRMQuestion(String message) {
        if (message == null || message.trim().isEmpty()) {
            return false;
        }

        String lower = message.toLowerCase().trim();

        String[] hrmKeywords = {
                // Personal HR Keywords
                "l∆∞∆°ng", "ti·ªÅn l∆∞∆°ng", "thu nh·∫≠p", "tƒÉng ca", "overtime",
                "ch·∫•m c√¥ng", "c√¥ng", "ƒëi l√†m", "ngh·ªâ l√†m", "attendance",
                "ngh·ªâ ph√©p", "xin ngh·ªâ", "ph√©p nƒÉm", "leave", "vacation",
                "h·ª£p ƒë·ªìng", "contract", "k√Ω h·ª£p ƒë·ªìng",
                "nh√¢n vi√™n", "employee", "ƒë·ªìng nghi·ªáp", "staff", "colleague",
                "team", "nh√≥m", "ƒë·ªôi", "ph√≤ng ban", "department",
                "th∆∞·ªüng", "bonus", "khen th∆∞·ªüng", "th∆∞·ªüng t·∫øt", "incentive",
                "th∆∞·ªüng th√°ng", "th∆∞·ªüng nƒÉm", "th∆∞·ªüng d·ª± √°n", "th∆∞·ªüng hi·ªáu su·∫•t",
                "ti·ªÅn th∆∞·ªüng", "m·ª©c th∆∞·ªüng", "l·ªãch s·ª≠ th∆∞·ªüng",
                "vi ph·∫°m", "violation", "ph·∫°t", "k·ª∑ lu·∫≠t", "discipline",
                "ti·ªÅn ph·∫°t", "m·ª©c ph·∫°t", "h√¨nh th·ª©c ph·∫°t", "penalty", "fine",
                "l·ªói", "sai ph·∫°m", "rule violation", "misconduct", "warning",
                "c·∫£nh c√°o", "khi·ªÉn tr√°ch", "k·ª∑ lu·∫≠t lao ƒë·ªông",
                "ph·ª• c·∫•p", "allowance", "tr·ª£ c·∫•p", "ph·ª• c·∫•p ƒÉn tr∆∞a",
                "b·∫£o hi·ªÉm", "insurance", "bhxh", "bhyt", "social insurance",
                "d·ª± √°n", "project", "nhi·ªám v·ª•", "c√¥ng vi·ªác", "task",
                "ch·ª©c v·ª•", "position", "c·∫•p b·∫≠c", "thƒÉng ch·ª©c", "promotion",
                "hr", "nh√¢n s·ª±", "ph√≤ng nh√¢n s·ª±", "human resource",
                "c·ªßa t√¥i", "th√¥ng tin t√¥i", "t√¥i c√≥", "t√¥i ƒë∆∞·ª£c", "my info",
                "salary", "wage", "income", "payroll", "compensation",
                "check in", "check out", "time tracking", "timesheet",
                "my salary", "my team", "my data", "my profile",

                // ‚úÖ NEW: Admin Management Keywords
                "danh s√°ch", "t·∫•t c·∫£", "to√†n b·ªô", "all employees", "list",
                "top", "cao nh·∫•t", "th·∫•p nh·∫•t", "nhi·ªÅu nh·∫•t", "√≠t nh·∫•t", "highest", "lowest",
                "b√°o c√°o", "report", "th·ªëng k√™", "statistics", "analytics", "dashboard",
                "ph√≤ng ban", "department", "theo ph√≤ng", "by department", "departmental",
                "c√¥ng ty", "company", "to√†n c√¥ng ty", "company-wide", "organization",
                "ph√¢n t√≠ch", "analysis", "so s√°nh", "compare", "comparison", "trend",
                "t·ªïng", "total", "trung b√¨nh", "average", "mean", "sum",
                "chi ph√≠", "cost", "ng√¢n s√°ch", "budget", "expense", "expenditure",
                "ƒëi mu·ªôn", "late", "mu·ªôn", "ch·∫≠m", "tardiness",
                "t·ªïng quan", "overview", "general", "summary",
                "t√¨m ki·∫øm", "search", "t√¨m", "find", "lookup",
                "th√¥ng tin c·ªßa", "info of", "detail of", "information about",
                "nh√¢n vi√™n t√™n", "employee named", "staff named"
        };

        boolean containsHRMKeywords = Arrays.stream(hrmKeywords)
                .anyMatch(lower::contains);

        boolean hasHRMPattern =
                lower.matches(".*\\b(c·ªßa t√¥i|t√¥i c√≥|t√¥i ƒë∆∞·ª£c|th√¥ng tin t√¥i)\\b.*") ||
                        lower.matches(".*\\b(team|nh√≥m|ph√≤ng ban|department)\\b.*") ||
                        lower.matches(".*\\b(b√°o c√°o|th·ªëng k√™|report|dashboard)\\b.*") ||
                        lower.matches(".*\\b(l∆∞∆°ng|salary|wage)\\b.*") ||
                        lower.matches(".*\\b(ch·∫•m c√¥ng|attendance|timesheet)\\b.*") ||
                        lower.matches(".*\\b(ngh·ªâ ph√©p|leave|vacation)\\b.*") ||
                        lower.matches(".*\\b(h·ª£p ƒë·ªìng|contract)\\b.*") ||
                        lower.matches(".*\\b(th∆∞·ªüng|bonus|khen th∆∞·ªüng)\\b.*") ||
                        lower.matches(".*\\b(vi ph·∫°m|violation|ph·∫°t)\\b.*") ||
                        lower.matches(".*\\b(danh s√°ch|t·∫•t c·∫£|to√†n b·ªô|all)\\b.*") ||
                        lower.matches(".*\\b(top|cao nh·∫•t|th·∫•p nh·∫•t|ranking)\\b.*") ||
                        lower.matches(".*\\b(ph√¢n t√≠ch|analysis|so s√°nh|compare)\\b.*") ||
                        lower.matches(".*\\b(t·ªïng|total|trung b√¨nh|average)\\b.*") ||
                        lower.matches(".*\\b(th√¥ng tin c·ªßa|nh√¢n vi√™n.*t√™n)\\b.*");

        log.info("üîç === HRM DETECTION DEBUG ===");
        log.info("üîç Original: '{}'", message);
        log.info("üîç Keywords match: {}", containsHRMKeywords);
        log.info("üîç Pattern match: {}", hasHRMPattern);
        log.info("üîç Final result: {}", (containsHRMKeywords || hasHRMPattern));

        if (lower.contains("th∆∞·ªüng")) {
            log.info("üîç ‚úÖ 'th∆∞·ªüng' keyword found!");
        }
        if (lower.contains("vi ph·∫°m")) {
            log.info("üîç ‚úÖ 'vi ph·∫°m' keyword found!");
        }
        if (lower.contains("c·ªßa t√¥i")) {
            log.info("üîç ‚úÖ 'c·ªßa t√¥i' pattern found!");
        }
        if (lower.contains("danh s√°ch")) {
            log.info("üîç ‚úÖ 'danh s√°ch' keyword found!");
        }

        return containsHRMKeywords || hasHRMPattern;
    }

    private String processHRMQuestion(String question, NhanVien currentUser, UserRole userRole) {
        log.info("üîÑ === PROCESSING HRM QUESTION ===");
        log.info("üîÑ Question: '{}'", question);
        log.info("üîÑ User: {} (ID: {})", currentUser.getHoTen(), currentUser.getId());
        log.info("üîÑ Role: {}", userRole);

        try {
            // Check component availability
            if (hrmTranslator == null) {
                log.error("‚ùå hrmTranslator is NULL!");
                return "‚ùå HRM Translator kh√¥ng kh·∫£ d·ª•ng.";
            }

            if (databaseExecutor == null) {
                log.error("‚ùå databaseExecutor is NULL!");
                return "‚ùå Database Executor kh√¥ng kh·∫£ d·ª•ng.";
            }

            if (responseFormatter == null) {
                log.error("‚ùå responseFormatter is NULL!");
                return "‚ùå Response Formatter kh√¥ng kh·∫£ d·ª•ng.";
            }

            // Step 1: Translate question to SQL
            log.info("üîÑ Step 1: Translating to SQL...");
            QueryResult queryResult;

            try {
                queryResult = hrmTranslator.translateToSQL(question);
                log.info("üîÑ Successfully called translateToSQL method");
            } catch (Exception e) {
                log.error("‚ùå Translation error: {}", e.getMessage(), e);
                return "‚ùå L·ªói d·ªãch c√¢u h·ªèi: " + e.getMessage();
            }

            if (queryResult == null) {
                log.error("‚ùå QueryResult is null after translation");
                return "‚ùå Kh√¥ng th·ªÉ d·ªãch c√¢u h·ªèi.";
            }

            log.info("üîÑ Translation result:");
            log.info("üîÑ   QueryType: {}", queryResult.getQueryType());
            log.info("üîÑ   SQL: {}", queryResult.getSqlQuery());

            // ‚úÖ IMPROVED: Better success check
            boolean isTranslationSuccess = (queryResult.getQueryType() != QueryType.UNKNOWN &&
                    queryResult.getSqlQuery() != null &&
                    !queryResult.getSqlQuery().trim().isEmpty());

            if (queryResult.getQueryType() == QueryType.PERMISSION_DENIED) {
                log.warn("üîÑ ‚ö†Ô∏è Permission denied for query");
                return "‚ùå B·∫°n kh√¥ng c√≥ quy·ªÅn truy c·∫≠p th√¥ng tin n√†y.";
            }

            log.info("üîÑ   Translation Success: {}", isTranslationSuccess);

            if (!isTranslationSuccess) {
                log.warn("üîÑ ‚ö†Ô∏è Translation failed - returning help message");
                return getHelpMessage(userRole);
            }

            // Step 2: Execute database query
            log.info("üîÑ Step 2: Executing database query...");
            DatabaseResponse dbResponse = databaseExecutor.executeQuery(queryResult);

            log.info("üîÑ Database execution:");
            log.info("üîÑ   Success: {}", dbResponse.isSuccess());
            log.info("üîÑ   Row count: {}", dbResponse.getData() != null ? dbResponse.getData().size() : 0);

            if (!dbResponse.isSuccess()) {
                log.error("üîÑ   Database Error: {}", dbResponse.getError());
                return "‚ùå L·ªói truy v·∫•n c∆° s·ªü d·ªØ li·ªáu: " + dbResponse.getError();
            }

            if (dbResponse.getData() == null || dbResponse.getData().isEmpty()) {
                log.warn("üîÑ   No data found");
                return "üì≠ Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu ph√π h·ª£p v·ªõi c√¢u h·ªèi c·ªßa b·∫°n.";
            }

            // Step 3: Format response for user
            log.info("üîÑ Step 3: Formatting response...");
            String formattedResponse = responseFormatter.formatResponse(dbResponse);

            log.info("üîÑ Final response:");
            log.info("üîÑ   Response length: {}", formattedResponse.length());

            if (formattedResponse.length() > 0) {
                String preview = formattedResponse.substring(0, Math.min(formattedResponse.length(), 200));
                log.info("üîÑ   Preview: {}", preview);
            }

            return formattedResponse;

        } catch (Exception e) {
            log.error("‚ùå ProcessHRMQuestion error: {}", e.getMessage(), e);
            return "‚ùå ƒê√£ x·∫£y ra l·ªói khi x·ª≠ l√Ω c√¢u h·ªèi HRM: " + e.getMessage();
        }
    }

    // ‚úÖ NEW: Role-based help messages
    private String getHelpMessage(UserRole userRole) {
        return switch (userRole) {
            case ADMIN -> """
                ‚ùì V·ªõi quy·ªÅn ADMIN, b·∫°n c√≥ th·ªÉ h·ªèi:
                
                üîç **T√¨m ki·∫øm nh√¢n vi√™n:**
                ‚Ä¢ "Th√¥ng tin c·ªßa nh√¢n vi√™n t√™n l√† Nguy·ªÖn VƒÉn An"
                ‚Ä¢ "Nh√¢n vi√™n c√≥ m√£ 1005"
                
                üìã **Qu·∫£n l√Ω nh√¢n vi√™n:**
                ‚Ä¢ "Danh s√°ch t·∫•t c·∫£ nh√¢n vi√™n trong c√¥ng ty"
                ‚Ä¢ "Top 10 nh√¢n vi√™n c√≥ l∆∞∆°ng cao nh·∫•t th√°ng 4/2025"
                
                üìä **B√°o c√°o v√† th·ªëng k√™:**
                ‚Ä¢ "B√°o c√°o l∆∞∆°ng theo ph√≤ng ban"
                ‚Ä¢ "L∆∞∆°ng trung b√¨nh theo ph√≤ng ban"
                ‚Ä¢ "Nh√¢n vi√™n ƒëi mu·ªôn nhi·ªÅu nh·∫•t th√°ng 6"
                ‚Ä¢ "Th·ªëng k√™ t·ªïng quan c√¥ng ty"
                ‚Ä¢ "Ph√¢n t√≠ch chi ph√≠ nh√¢n s·ª± th√°ng 6"
                ‚Ä¢ "T·ªïng chi ph√≠ l∆∞∆°ng c√¥ng ty"
                
                üìã **Th√¥ng tin c√° nh√¢n:**
                ‚Ä¢ "L∆∞∆°ng c·ªßa t√¥i"
                ‚Ä¢ "Th√¥ng tin c√° nh√¢n c·ªßa t√¥i"
                ‚Ä¢ "Ch·∫•m c√¥ng c·ªßa t√¥i"
                """;
            case MANAGER -> """
                ‚ùì V·ªõi quy·ªÅn MANAGER, b·∫°n c√≥ th·ªÉ h·ªèi:
                
                üë• **Qu·∫£n l√Ω team:**
                ‚Ä¢ "Danh s√°ch nh√¢n vi√™n trong team"
                ‚Ä¢ "B√°o c√°o ch·∫•m c√¥ng team"
                
                üìã **Th√¥ng tin c√° nh√¢n:**
                ‚Ä¢ "L∆∞∆°ng c·ªßa t√¥i"
                ‚Ä¢ "Th√¥ng tin c√° nh√¢n c·ªßa t√¥i"
                ‚Ä¢ "Ch·∫•m c√¥ng c·ªßa t√¥i"
                """;
            default -> """
                ‚ùì B·∫°n c√≥ th·ªÉ h·ªèi v·ªÅ:
                
                üìã **Th√¥ng tin c√° nh√¢n:**
                ‚Ä¢ "L∆∞∆°ng th√°ng 4 c·ªßa t√¥i"
                ‚Ä¢ "S·ªë ng√†y ph√©p c√≤n l·∫°i c·ªßa t√¥i"
                ‚Ä¢ "Th√¥ng tin ch·∫•m c√¥ng th√°ng n√†y"
                ‚Ä¢ "H·ª£p ƒë·ªìng lao ƒë·ªông c·ªßa t√¥i"
                ‚Ä¢ "Th∆∞·ªüng c·ªßa t√¥i"
                ‚Ä¢ "Vi ph·∫°m c·ªßa t√¥i"
                """;
        };
    }

    private String processGeneralQuestion(String question, String username) {
        try {
            log.info("üí¨ Processing as general chat question for user: {}", username);
            String contextualPrompt = buildHRMContextPrompt(question);
            return generalChatService.processMessage(contextualPrompt, username);
        } catch (Exception e) {
            log.error("‚ùå General chat error: {}", e.getMessage(), e);
            return "‚ùå Kh√¥ng th·ªÉ x·ª≠ l√Ω c√¢u h·ªèi: " + e.getMessage();
        }
    }

    private String buildHRMContextPrompt(String originalQuestion) {
        return """
            B·∫°n l√† tr·ª£ l√Ω AI cho h·ªá th·ªëng qu·∫£n l√Ω nh√¢n s·ª± (HRM). 
            N·∫øu c√¢u h·ªèi li√™n quan ƒë·∫øn HR/nh√¢n s·ª±, h√£y g·ª£i √Ω ng∆∞·ªùi d√πng h·ªèi c·ª• th·ªÉ h∆°n v·ªÅ:
            - Th√¥ng tin c√° nh√¢n (l∆∞∆°ng, ch·∫•m c√¥ng, ngh·ªâ ph√©p)
            - Qu·∫£n l√Ω nh√¢n vi√™n (n·∫øu l√† manager)
            - B√°o c√°o HR (n·∫øu l√† HR/Admin)
            
            C√¢u h·ªèi: """ + originalQuestion;
    }

    // Public utility method for testing
    public boolean testHRMDetection(String message) {
        return isHRMQuestion(message);
    }

    // Debug method
    public String getDebugInfo() {
        NhanVien currentUser = permissionService.getCurrentUser();
        UserRole userRole = permissionService.getCurrentUserRole();

        return String.format("""
            üîß HRM Chat Service Debug Info:
            üë§ Current User: %s (ID: %s)
            üé≠ User Role: %s
            üîó Components Status:
            - HRM Translator: %s
            - Database Executor: %s  
            - Response Formatter: %s
            - Permission Service: %s
            """,
                currentUser != null ? currentUser.getHoTen() : "NULL",
                currentUser != null ? currentUser.getId() : "NULL",
                userRole,
                hrmTranslator != null ? "‚úÖ Available" : "‚ùå NULL",
                databaseExecutor != null ? "‚úÖ Available" : "‚ùå NULL",
                responseFormatter != null ? "‚úÖ Available" : "‚ùå NULL",
                permissionService != null ? "‚úÖ Available" : "‚ùå NULL"
        );
    }
}